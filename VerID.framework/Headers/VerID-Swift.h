// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import AVFoundation;
@import Foundation;
@import CoreMedia;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("VerID")
@class UIImage;
@class FBFace;
@class PHAsset;
@class NSError;

SWIFT_CLASS("_TtC5VerID9ImageUtil")
@interface ImageUtil : NSObject
+ (UIImage * _Nonnull)extractFaceFrom:(UIImage * _Nonnull)image andFace:(FBFace * _Nonnull)face fitIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (void)findFaceIn:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(NSError * _Nullable, UIImage * _Nullable, FBFace * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_CLASS("_TtC5VerID7SDKAuth")
@interface SDKAuth : NSObject
+ (NSNumber * _Nullable)authWithAPIKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)isCallHomeRequiredWithAPIKey:(NSString * _Nonnull)apiKey secret:(NSString * _Nonnull)secret error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (void)callHome:(NSString * _Nullable)errorDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC5VerID25StillCameraViewController")
@interface StillCameraViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end









enum SecurityLevel : NSInteger;
@class VerIDUser;

/// Provides access to essential Ver-ID functions.
SWIFT_CLASS("_TtC5VerID5VerID")
@interface VerID : NSObject
/// Shared instance of Ver-ID.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VerID * _Nonnull shared;)
+ (VerID * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSError * _Nullable loadError;
/// Load Ver-ID and its resources and authenticate the client app.
/// note:
/// Apps running the demo framework (VerIDDemo.framework) may also set the apiSecret in their Info.plist file and omit the <code>apiSecret</code> parameter.
/// seealso:
/// <code>unload()</code>
/// \param apiSecret Must not be nil if your app is running the demo version of the framework (VerIDDemo.framework).
///
/// \param callback Block to be executed when Ver-ID is loaded. The blockâ€™s error parameter will not be nil if the client app authentication fails. You may still run Ver-ID when client app authentication fails but the functionality will be limited.
///
- (void)load:(NSString * _Nullable)apiSecret callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Unload Ver-ID. Unload Ver-ID and release its resources. You must call <code>load()</code> or <code>loadAsync(_:)</code> again prior to calling any Ver-ID methods.
/// seealso:
/// <code>load(_:)</code>
- (void)unload;
/// Determine whether Ver-ID has been loaded.
/// <code>true</code> if Ver-ID has been loaded and is ready to use.
/// seealso:
/// <code>load(_:)</code>
@property (nonatomic, readonly) BOOL isLoaded;
/// Authentication security level. Choose higher levels for stricter authentication or lower levels to be more forgiving.
/// seealso:
/// <code>VerID.SecurityLevel</code>
@property (nonatomic) enum SecurityLevel securityLevel;
/// List of registered Ver-ID users.
///
/// returns:
/// registered users
- (NSArray<VerIDUser *> * _Nullable)registeredVerIDUsersAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Deregister the user and delete the associated account. Subsequent attempts to authenticate as this user will fail.
/// \param userId The user to deregister
///
- (void)deregisterUser:(NSString * _Nonnull)userId callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// Get a profile picture for a user with the given id. This is one of the images captured when the user registers.
/// \param userId the user id
///
///
/// returns:
/// an image that can be used as a profile picture or nil if the picture or the user is unavailable
- (UIImage * _Nullable)userProfilePicture:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)profilePictureURLWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
@end

/// Authentication security level settings. Higher levels mean stricter authentication. Lower levels are more forgiving.
typedef SWIFT_ENUM(NSInteger, SecurityLevel) {
/// The most relaxed security. Legitimate users should have no difficulty authenticating. May authenticate an imposter.
  SecurityLevelLowest = 0,
/// Easy authentication.
  SecurityLevelLow = 1,
/// Balance of easy authentication and high security.
  SecurityLevelNormal = 2,
/// High security.
  SecurityLevelHigh = 3,
/// Strictest security. Least likely to authenticate an imposter. Legitimate users may have difficulty authenticating.
  SecurityLevelHighest = 4,
};

/// Bearing of the userâ€™s head as sheâ€™s looking at the camera
typedef SWIFT_ENUM(NSInteger, Bearing) {
/// The userâ€™s head is level with the camera
  BearingStraight = 0,
/// The userâ€™s head is turned up
  BearingUp = 1,
/// The userâ€™s head is turned right and up
  BearingRightUp = 2,
/// The userâ€™s head is turned right
  BearingRight = 3,
/// The userâ€™s head is turned right and down
  BearingRightDown = 4,
/// The userâ€™s head is turned down
  BearingDown = 5,
/// The userâ€™s head is turned left and down
  BearingLeftDown = 6,
/// The userâ€™s head is turned left
  BearingLeft = 7,
/// The userâ€™s head is turned left and up
  BearingLeftUp = 8,
};

/// Anti-spoofing methods
typedef SWIFT_ENUM(NSInteger, AntiSpoofingMethod) {
  AntiSpoofingMethodBearing = 0,
};

@class VerIDSessionSettings;
@protocol VerIDSessionDelegate;

/// Base class for Ver-ID sessions
SWIFT_CLASS("_TtC5VerID12VerIDSession")
@interface VerIDSession : NSObject
/// Settings for the session. The settings can only be set at initialization. The individual setting values can be modified before the session starts.
@property (nonatomic, readonly, strong) VerIDSessionSettings * _Nonnull settings;
/// The session delegate that receives the outcome of the session and its individual face detection results.
@property (nonatomic, weak) id <VerIDSessionDelegate> _Nullable delegate;
/// Session identifier. Useful if you have a single delegate handling multiple sessions and you need to distinguish between them.
@property (nonatomic, readonly) NSInteger identifier;
/// Session initializer.
/// \param settings Session settings. May only be set at initialization.
///
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Start the session.
- (void)start;
/// Cancel (stop) the session. <code>session(_:didFinishWithOutcome:)</code> will be called on your delegate with the outcome value set to <code>.cancel</code>.
- (void)cancel;
@end

/// Describes the outcome of the session
typedef SWIFT_ENUM(NSInteger, Outcome) {
/// The session finished successfully
  OutcomeSuccess = 0,
/// The session didnâ€™t receive enough positive results to make a decision and it timed out
  OutcomeFailNumberOfResults = 1,
/// The session failed
  OutcomeUnknownFailure = 2,
/// The session was cancelled
  OutcomeCancel = 3,
/// The session failed to ascertain that the received images were of genuine user in front of the camera
  OutcomeFailAntiSpoofingChallenge = 4,
/// The session outcome is inconclusive because itâ€™s still waiting for more images
  OutcomeWaiting = 5,
/// The session failed because the client host app didnâ€™t authenticate
  OutcomeFailHostAuthentication = 6,
/// The session failed because Ver-ID is not loaded
  OutcomeFailNotLoaded = 7,
/// One of the detection/recognition library calls returned an error
  OutcomeDetRecLibFailure = 8,
};


/// Represents an authentication session.
SWIFT_CLASS("_TtC5VerID26VerIDAuthenticationSession")
@interface VerIDAuthenticationSession : VerIDSession
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
@end


/// Settings common to registration and authentication sessions
SWIFT_CLASS("_TtC5VerID20VerIDSessionSettings")
@interface VerIDSessionSettings : NSObject
/// How many successful results the session must collect before it finishes.
@property (nonatomic) NSInteger numberOfResultsToCollect;
/// The time the user has to complete each bearing (in seconds).
@property (nonatomic) NSTimeInterval expiryTime;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LivenessDetection) {
  LivenessDetectionNone = 0,
  LivenessDetectionRegular = 1,
  LivenessDetectionStrict = 2,
};


SWIFT_CLASS("_TtC5VerID37VerIDLivenessDetectionSessionSettings")
@interface VerIDLivenessDetectionSessionSettings : VerIDSessionSettings
@property (nonatomic) BOOL showGuide;
@property (nonatomic) BOOL showResult;
/// How long the session should wait before authenticating the first captured face (in seconds). When running anti-spoofing the user has to have time to assume the requested pose. On authentication sessions where anti-spoofing is not employed the default value is <code>0.0</code>. Otherwise itâ€™s <code>2.0</code>.
@property (nonatomic) NSTimeInterval segmentStartDelay;
/// Minimum duration of the authentication segment. If the user authenticates before the duration elapses the session will wait before loading the next segment. This is to prevent the instructions from changing too fast.
@property (nonatomic) NSTimeInterval segmentDuration;
/// The number of segments required per session. The user is prompted to assume a random bearing in each segment in sessions that employ anti-spoofing. The default for anti-spoofing sessions is <code>4</code>, for sessions that do not employ anti-spoofing the default is <code>1</code>.
@property (nonatomic) NSInteger requiredNumberOfSegments;
@property (nonatomic) BOOL includeFaceTemplatesInResult;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect OBJC_DESIGNATED_INITIALIZER;
@end


/// Settings for authentication sessions
SWIFT_CLASS("_TtC5VerID34VerIDAuthenticationSessionSettings")
@interface VerIDAuthenticationSessionSettings : VerIDLivenessDetectionSessionSettings
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) enum LivenessDetection livenessDetection;
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId livenessDetection:(enum LivenessDetection)livenessDetection OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5VerID17VerIDDebugSession")
@interface VerIDDebugSession : VerIDSession
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents a face found by Ver-ID
SWIFT_CLASS("_TtC5VerID9VerIDFace")
@interface VerIDFace : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5VerID29VerIDLivenessDetectionSession")
@interface VerIDLivenessDetectionSession : VerIDSession
/// Instantiates a liveness detection session
/// \param settings Session settings
///
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
@end



/// Use this class to launch Ver-ID registration sessions
SWIFT_CLASS("_TtC5VerID24VerIDRegistrationSession")
@interface VerIDRegistrationSession : VerIDSession
/// Session initializer.
/// \param userId Identifier for the user being registered. If <code>nil</code> or omitted a unique identifier will be generated.
///
/// \param settings The settings for the session. If <code>nil</code> or omitted the session will use the default registration settings.
///
- (nonnull instancetype)initWithSettings:(VerIDSessionSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
@end


/// Settings for registration sessions
SWIFT_CLASS("_TtC5VerID32VerIDRegistrationSessionSettings")
@interface VerIDRegistrationSessionSettings : VerIDSessionSettings
@property (nonatomic) BOOL showGuide;
@property (nonatomic) BOOL showResult;
@property (nonatomic, readonly) enum LivenessDetection livenessDetection;
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic) BOOL appendIfUserExists;
- (nonnull instancetype)initWithUserId:(NSString * _Nullable)userId livenessDetection:(enum LivenessDetection)livenessDetection showGuide:(BOOL)showGuide showResult:(BOOL)showResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithExpiryTime:(NSTimeInterval)expiryTime numberOfResultsToCollect:(NSInteger)numberOfResultsToCollect SWIFT_UNAVAILABLE;
@end

@class UIStoryboardSegue;
@class AVCaptureOutput;
@class AVCaptureConnection;

/// Base class for Ver-ID view controllers.
/// Instead of using subclasses of <code>VerIDSession</code> you may instantiate or subclass one of the subclasses of <code>VerIDViewController</code> and present them in your view controller. This gives you more control over the layout and the running of registration or authentication but itâ€™s more difficult to implement.
/// <ul>
///   <li>
///     See: <code>VerIDRegistrationViewController</code>
///     <code>VerIDAuthenticationViewController</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5VerID19VerIDViewController")
@interface VerIDViewController : StillCameraViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillDisappear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// View controller to use on user registration.
SWIFT_CLASS("_TtC5VerID31VerIDRegistrationViewController")
@interface VerIDRegistrationViewController : VerIDViewController
/// View controller initializer.
/// \param userId Identifier for the registering user. If nil a UUID will be generated by the view controller.
///
- (void)viewDidLoad;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class VerIDSessionResult;

/// Delegate that receives Ver-ID session results.
SWIFT_PROTOCOL("_TtP5VerID20VerIDSessionDelegate_")
@protocol VerIDSessionDelegate
@optional
/// Implement this method to observe the individual face detection results. You may use this to observe the collected images and the faces found in them.
/// \param session The session returning the result.
///
/// \param result The result. Includes the users identified in the collected face.
///
/// \param image The image used for face detection. If the result is generated following a timeout the image will be <code>nil</code>.
///
/// \param face The face detected in the image. May be <code>nil</code> if no face is detected or if the result is generated following a timeout.
///
- (void)session:(VerIDSession * _Nonnull)session didReturnResult:(VerIDSessionResult * _Nonnull)result forImage:(UIImage * _Nullable)image andFace:(VerIDFace * _Nullable)face;
/// Implement this method to observe the final outcome of non-persistent sessions. <code>.success</code> indicates that the user authenticated or finished registration, depending on the kind of session returning the result.
/// \param session The session returning the outcome.
///
/// \param outcome The outcome of the session.
///
- (void)session:(VerIDSession * _Nonnull)session didFinishWithOutcome:(enum Outcome)outcome;
@required
- (void)session:(VerIDSession * _Nonnull)session didFinishWithResult:(VerIDSessionResult * _Nonnull)result;
@end


/// Represents a result of face detection and authentication
SWIFT_CLASS("_TtC5VerID18VerIDSessionResult")
@interface VerIDSessionResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Represents a user and her/his registered bearings
SWIFT_CLASS("_TtC5VerID9VerIDUser")
@interface VerIDUser : NSObject
/// Identifier for the user
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Array of bearings registered for this user. Consider using the set <code>bearings</code> in Swift apps.
/// -See: <code>bearings</code>
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull bearingsArray;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultUserId;)
+ (NSString * _Nonnull)defaultUserId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Delegate that receives the outcome of the Ver-ID session that runs in the Ver-ID view controller.
SWIFT_PROTOCOL("_TtP5VerID27VerIDViewControllerDelegate_")
@protocol VerIDViewControllerDelegate
/// Called when the session finishes.
/// seealso:
/// <code>VerIDSessionResult</code>
/// since:
/// 1.6
/// \param viewController the Ver-ID view controller that runs the session
///
/// \param result the result of the session
///
- (void)viewController:(VerIDViewController * _Null_unspecified)viewController didEndSessionWithResult:(VerIDSessionResult * _Nonnull)result;
@optional
/// Called after face detection finishes on a captured image.
/// since:
/// 1.6
/// \param viewController the Ver-ID view controller that runs the session
///
/// \param result the result of the face evaluation
///
/// \param image the image on which the face detection was performed
///
/// \param face the detected face or nil if no face was detected in the image
///
- (void)viewController:(VerIDViewController * _Nonnull)viewController didGenerateResult:(VerIDSessionResult * _Nonnull)result fromImage:(UIImage * _Nullable)image withDetectedFace:(VerIDFace * _Nullable)face;
@required
- (void)viewController:(VerIDViewController * _Nonnull)viewController didEndSessionWithOutcome:(enum Outcome)outcome SWIFT_UNAVAILABLE_MSG("Please see `viewController(:didEndSessionWithResult)`");
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
